{"version":3,"sources":["event.js"],"names":["Event","url","instanceName","instance","_getInstanceURL","emit","signalString","payload","fetch","bind","socket","signal","_splitSignal","signalParams","push","Promise","resolve","reject","options","method","body","JSON","stringify","join","then","catch","splited","split","length"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;AAIA,MAAMA,KAAN,gCAAiC;AAC/BC,QAAO;AACL,UAAM,EAACC,YAAD,KAAiB,KAAKC,QAA5B;;AAEA,WAAQ,GAAE,KAAKC,eAAL,CAAqBF,YAArB,CAAmC,iBAA7C;AACD;;AAED;;;;;;;;AAQAG,OAAMC,YAAN,EAAoBC,OAApB,EAA6B;AAC3B,UAAMC,QAAQ,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAd;AACA,UAAM,EAACC,MAAD,EAASC,MAAT,KAAmBX,MAAMY,YAAN,CAAmBN,YAAnB,CAAzB;;AAEA,UAAMO,eAAe,EAArB;;AAEA,QAAIH,MAAJ,EAAY;AACVG,mBAAaC,IAAb,CAAkBJ,MAAlB;AACD,KAFD,MAEO;AACLG,mBAAaC,IAAb,CAAkB,KAAKX,QAAL,CAAcO,MAAhC;AACD;;AAEDG,iBAAaC,IAAb,CAAkB,GAAlB;AACAD,iBAAaC,IAAb,CAAkBH,MAAlB;;AAEA,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU;AACdC,gBAAQ,MADM;AAEdC,cAAMC,KAAKC,SAAL,CAAe;AACnBX,kBAAQE,aAAaU,IAAb,CAAkB,EAAlB,CADW;AAEnBhB;AAFmB,SAAf;AAFQ,OAAhB;;AAQAC,YAAM,KAAKP,GAAL,EAAN,EAAkBiB,OAAlB,EAA2BM,IAA3B,CAAgCR,OAAhC,EAAyCS,KAAzC,CAA+CR,MAA/C;AACD,KAVM,CAAP;AAWD;;AAED,SAAOL,YAAP,CAAqBN,YAArB,EAAmC;AACjC,UAAMoB,UAAUpB,aAAaqB,KAAb,CAAmB,GAAnB,CAAhB;AACA,QAAID,QAAQE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,aAAO,EAACjB,QAAQe,QAAQ,CAAR,CAAT,EAAP;AACD;AACD,WAAO;AACLhB,cAAQgB,QAAQ,CAAR,CADH;AAELf,cAAQe,QAAQ,CAAR;AAFH,KAAP;AAID;AApD8B;;kBAuDlB1B,K","file":"event.js","sourcesContent":["import QueryBuilder from './query-builder'\n\n/**\n * Syncano account query builder\n * @property {Function}\n */\nclass Event extends QueryBuilder {\n  url () {\n    const {instanceName} = this.instance\n\n    return `${this._getInstanceURL(instanceName)}/triggers/emit/`\n  }\n\n  /**\n   * Emit event\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const instance = await event.emit('signal_name', payload={})\n   */\n  emit (signalString, payload) {\n    const fetch = this.fetch.bind(this)\n    const {socket, signal} = Event._splitSignal(signalString)\n\n    const signalParams = []\n\n    if (socket) {\n      signalParams.push(socket)\n    } else {\n      signalParams.push(this.instance.socket)\n    }\n\n    signalParams.push('.')\n    signalParams.push(signal)\n\n    return new Promise((resolve, reject) => {\n      const options = {\n        method: 'POST',\n        body: JSON.stringify({\n          signal: signalParams.join(''),\n          payload\n        })\n      }\n\n      fetch(this.url(), options).then(resolve).catch(reject)\n    })\n  }\n\n  static _splitSignal (signalString) {\n    const splited = signalString.split('.')\n    if (splited.length === 1) {\n      return {signal: splited[0]}\n    }\n    return {\n      socket: splited[0],\n      signal: splited[1]\n    }\n  }\n}\n\nexport default Event\n"]}