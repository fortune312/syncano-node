{"version":3,"sources":["instance.js"],"names":["Instance","url","instanceName","baseUrl","_getSyncanoURL","create","params","fetch","nonInstanceFetch","bind","Promise","resolve","reject","headers","instance","accountKey","options","method","body","JSON","stringify","then","catch","delete"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;AAIA,MAAMA,QAAN,gCAAoC;AAClCC,MAAKC,YAAL,EAAmB;AACjB,UAAMC,UAAW,GAAE,KAAKC,cAAL,EAAsB,aAAzC;;AAEA,WAAOF,eAAgB,GAAEC,OAAQ,GAAED,YAAa,GAAzC,GAA8CC,OAArD;AACD;;AAED;;;;;;;;AAQAE,SAAQC,MAAR,EAAgB;AACd,UAAMC,QAAQ,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAd;;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU;AACd,qBAAa,KAAKC,QAAL,CAAcC;AADb,OAAhB;AAGA,YAAMC,UAAU;AACdC,gBAAQ,MADM;AAEdC,cAAMC,KAAKC,SAAL,CAAed,MAAf;AAFQ,OAAhB;AAIAC,YAAM,KAAKN,GAAL,EAAN,EAAkBe,OAAlB,EAA2BH,OAA3B,EAAoCQ,IAApC,CAAyCV,OAAzC,EAAkDW,KAAlD,CAAwDV,MAAxD;AACD,KATM,CAAP;AAUD;;AAED;;;;;;;;AAQAW,SAAQrB,YAAR,EAAsB;AACpB,UAAMK,QAAQ,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAd;;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU;AACd,qBAAa,KAAKC,QAAL,CAAcC;AADb,OAAhB;AAGA,YAAMC,UAAU;AACdC,gBAAQ;AADM,OAAhB;AAGAV,YAAM,KAAKN,GAAL,CAASC,YAAT,CAAN,EAA8Bc,OAA9B,EAAuCH,OAAvC,EACGQ,IADH,CACQV,OADR,EAEGW,KAFH,CAESV,MAFT;AAGD,KAVM,CAAP;AAWD;AApDiC;;kBAuDrBZ,Q","file":"instance.js","sourcesContent":["import QueryBuilder from './query-builder'\n\n/**\n * Syncano account query builder\n * @property {Function}\n */\nclass Instance extends QueryBuilder {\n  url (instanceName) {\n    const baseUrl = `${this._getSyncanoURL()}/instances/`\n\n    return instanceName ? `${baseUrl}${instanceName}/` : baseUrl\n  }\n\n  /**\n   * Create Syncano instance\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const instance = await instance.create({name: 'new-instance', description: 'description'})\n   */\n  create (params) {\n    const fetch = this.nonInstanceFetch.bind(this)\n\n    return new Promise((resolve, reject) => {\n      const headers = {\n        'X-API-KEY': this.instance.accountKey\n      }\n      const options = {\n        method: 'POST',\n        body: JSON.stringify(params)\n      }\n      fetch(this.url(), options, headers).then(resolve).catch(reject)\n    })\n  }\n\n  /**\n   * Delete Syncano instance\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * await instance.delete('new-instance')\n   */\n  delete (instanceName) {\n    const fetch = this.nonInstanceFetch.bind(this)\n\n    return new Promise((resolve, reject) => {\n      const headers = {\n        'X-API-KEY': this.instance.accountKey\n      }\n      const options = {\n        method: 'DELETE'\n      }\n      fetch(this.url(instanceName), options, headers)\n        .then(resolve)\n        .catch(reject)\n    })\n  }\n}\n\nexport default Instance\n"]}