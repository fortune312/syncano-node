{"version":3,"sources":["server.js"],"names":["server","ctx","settings","getConfig","className","Object","assign","config","_class","users","event","channel","socket","response","account","instance","meta","debug","logger","data","Proxy","get","target"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,SAAS,CAACC,MAAM,EAAP,KAAc;AAC3B,QAAMC,WAAW,uBAAaD,GAAb,CAAjB;AACA,QAAME,YAAYC,aAAaC,OAAOC,MAAP,CAAc,EAACF,SAAD,EAAd,EAA2BF,QAA3B,CAA/B;AACA,QAAMK,SAASJ,WAAf;;AAEA,QAAMK,SAAS,oBAAUD,MAAV,CAAf;AACA,QAAME,QAAQ,oBAAUF,MAAV,CAAd;AACA,QAAMG,QAAQ,oBAAUH,MAAV,CAAd;AACA,QAAMI,UAAU,sBAAYJ,MAAZ,CAAhB;AACA,QAAMK,SAAS,qBAAWL,MAAX,CAAf;AACA,QAAMM,WAAW,uBAAaN,MAAb,CAAjB;AACA,QAAMO,UAAU,sBAAYP,MAAZ,CAAhB;AACA,QAAMQ,WAAW,uBAAaR,MAAb,CAAjB;;AAEA,mBAAOA,MAAP,GAAgBN,IAAIe,IAAJ,CAASC,KAAzB;;AAEA,SAAO;AACLT,UADK;AAELC,SAFK;AAGLK,WAHK;AAILC,YAJK;AAKLL,SALK;AAMLC,WANK;AAOLC,UAPK;AAQLC,YARK;AASLK,4BATK;AAULC,UAAM,IAAIC,KAAJ,CAAU,mBAASlB,QAAT,CAAV,EAA8B;AAClCmB,UAAKC,MAAL,EAAalB,SAAb,EAAwB;AACtB,eAAO,mBAASD,UAAUC,SAAV,CAAT,CAAP;AACD;AAHiC,KAA9B;AAVD,GAAP;AAgBD,CAhCD;;kBAkCeJ,M","file":"server.js","sourcesContent":["import Data from './data'\nimport Users from './users'\nimport Account from './account'\nimport Instance from './instance'\nimport Event from './event'\nimport Socket from './socket'\nimport Response from './response'\nimport Logger from './logger'\nimport Channel from './channel'\nimport Class from './class'\nimport Settings from './settings'\n\nconst server = (ctx = {}) => {\n  const settings = new Settings(ctx)\n  const getConfig = className => Object.assign({className}, settings)\n  const config = getConfig()\n\n  const _class = new Class(config)\n  const users = new Users(config)\n  const event = new Event(config)\n  const channel = new Channel(config)\n  const socket = new Socket(config)\n  const response = new Response(config)\n  const account = new Account(config)\n  const instance = new Instance(config)\n\n  Logger.config = ctx.meta.debug\n\n  return {\n    _class,\n    users,\n    account,\n    instance,\n    event,\n    channel,\n    socket,\n    response,\n    logger: Logger,\n    data: new Proxy(new Data(settings), {\n      get (target, className) {\n        return new Data(getConfig(className))\n      }\n    })\n  }\n}\n\nexport default server\n"]}