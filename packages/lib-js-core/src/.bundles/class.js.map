{"version":3,"sources":["class.js"],"names":["Class","url","className","instanceName","instance","baseUrl","_getInstanceURL","create","params","fetch","bind","Promise","resolve","reject","options","method","body","JSON","stringify","then","catch","delete"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;AAIA,MAAMA,KAAN,gCAAiC;AAC/BC,MAAKC,SAAL,EAAgB;AACd,UAAM,EAACC,YAAD,KAAiB,KAAKC,QAA5B;AACA,UAAMC,UAAW,GAAE,KAAKC,eAAL,CAAqBH,YAArB,CAAmC,WAAtD;;AAEA,WAAOD,YAAa,GAAEG,OAAQ,GAAEH,SAAU,GAAnC,GAAwCG,OAA/C;AACD;;AAED;;;;;;;;AAQAE,SAAQC,MAAR,EAAgB;AACd,UAAMC,QAAQ,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAd;;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU;AACdC,gBAAQ,MADM;AAEdC,cAAMC,KAAKC,SAAL,CAAeV,MAAf;AAFQ,OAAhB;;AAKAC,YAAM,KAAKR,GAAL,EAAN,EAAkBa,OAAlB,EAA2BK,IAA3B,CAAgCP,OAAhC,EAAyCQ,KAAzC,CAA+CP,MAA/C;AACD,KAPM,CAAP;AAQD;;AAED;;;;;;;;AAQAQ,SAAQnB,SAAR,EAAmB;AACjB,UAAMO,QAAQ,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAd;;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,UAAU;AACdC,gBAAQ;AADM,OAAhB;;AAIAN,YAAM,KAAKR,GAAL,CAASC,SAAT,CAAN,EAA2BY,OAA3B,EAAoCK,IAApC,CAAyCP,OAAzC,EAAkDQ,KAAlD,CAAwDP,MAAxD;AACD,KANM,CAAP;AAOD;AA/C8B;;kBAkDlBb,K","file":"class.js","sourcesContent":["import QueryBuilder from './query-builder'\n\n/**\n * Syncano account query builder\n * @property {Function}\n */\nclass Class extends QueryBuilder {\n  url (className) {\n    const {instanceName} = this.instance\n    const baseUrl = `${this._getInstanceURL(instanceName)}/classes/`\n\n    return className ? `${baseUrl}${className}/` : baseUrl\n  }\n\n  /**\n   * Create Syncano class\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const instance = await class.create({name: 'class_name'})\n   */\n  create (params) {\n    const fetch = this.fetch.bind(this)\n\n    return new Promise((resolve, reject) => {\n      const options = {\n        method: 'POST',\n        body: JSON.stringify(params)\n      }\n\n      fetch(this.url(), options).then(resolve).catch(reject)\n    })\n  }\n\n  /**\n   * Delete Syncano class\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * await syncanoClass.delete('class_name')\n   */\n  delete (className) {\n    const fetch = this.fetch.bind(this)\n\n    return new Promise((resolve, reject) => {\n      const options = {\n        method: 'DELETE'\n      }\n\n      fetch(this.url(className), options).then(resolve).catch(reject)\n    })\n  }\n}\n\nexport default Class\n"]}