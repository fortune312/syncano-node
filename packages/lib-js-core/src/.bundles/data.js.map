{"version":3,"sources":["data.js"],"names":["Data","url","id","instanceName","className","instance","_getInstanceURL","_url","undefined","query","stringify","_batchBodyBuilder","body","apiVersion","path","reduce","data","item","singleRequest","method","Array","isArray","JSON","isNaN","requests","push","_batchFetchObject","list","result","self","baseUrl","relationships","mappedFields","_mapFields","fetch","bind","pageSize","page_size","Promise","resolve","reject","request","then","saveToResult","loadNextPage","resolveRelatedModels","replaceCustomTypesWithValue","mapResultFields","resolveIfFinished","catch","err","response","concat","objects","hasNextPageMeta","next","hasNotEnoughResults","length","shouldResolve","resolvers","map","reference","empty","target","items","Error","references","filter","row","load","ids","value","where","all","models","forEach","related","_getRelatedObjects","Object","keys","key","isObject","hasType","type","hasTarget","hasValue","slice","fields","obj","indexOf","find","first","take","firstOrFail","object","firstOrCreate","attributes","values","_toWhereArray","create","updateOrCreate","res","update","findOrFail","shouldThrow","count","withQuery","orderBy","column","direction","toLowerCase","order_by","operator","itemColumn","itemOperator","itemValue","_normalizeWhereOperator","whereOperator","whereValue","currentQuery","parse","nextQuery","split","reverse","child","_is","operators","fieldsToMap","field","from","to","match","withMappedFields","with","withRelationships","pluck","headers","fetchObject","getHeaders","isQueryUpdate","delete","isQueryDelete"],"mappings":"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","file":"data.js","sourcesContent":["import querystring from 'querystring'\nimport FormData from 'form-data'\nimport set from 'lodash.set'\nimport get from 'lodash.get'\nimport merge from 'lodash.merge'\nimport QueryBuilder from './query-builder'\nimport {NotFoundError} from './errors'\n\n/**\n * Syncano server\n * @property {Function} query Instance of syncano DataObject\n */\nclass Data extends QueryBuilder {\n  url (id) {\n    const {instanceName, className} = this.instance\n    let url = `${this._getInstanceURL(instanceName)}/classes/${className}/objects/${id ? id + '/' : ''}`\n\n    if (this._url !== undefined) {\n      url = this._url\n    }\n\n    const query = querystring.stringify(this.query)\n\n    return query ? `${url}?${query}` : url\n  }\n\n  _batchBodyBuilder (body) {\n    const {instanceName, className, apiVersion} = this.instance\n    const path = `/${apiVersion}/instances/${instanceName}/classes/${className}/objects/`\n\n    return body.reduce(\n      (data, item) => {\n        const singleRequest = {\n          method: 'POST',\n          path\n        }\n\n        if (Array.isArray(item)) {\n          singleRequest.method = 'PATCH'\n          singleRequest.path = `${path}${item[0]}/`\n          singleRequest.body = JSON.stringify(item[1])\n        } else if (isNaN(item) === false) {\n          singleRequest.method = 'DELETE'\n          singleRequest.path = `${path}${item}/`\n        } else {\n          singleRequest.body = JSON.stringify(item)\n        }\n\n        data.requests.push(singleRequest)\n\n        return data\n      },\n      {requests: []}\n    )\n  }\n\n  _batchFetchObject (body) {\n    const {instanceName} = this.instance\n\n    return {\n      url: `${this._getInstanceURL(instanceName)}/batch/`,\n      method: 'POST',\n      body: JSON.stringify(this._batchBodyBuilder(body))\n    }\n  }\n\n  /**\n   * List objects matching query.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * // Get all posts\n   * const posts = await data.posts.list()\n   * @example {@lang javascript}\n   * // Get 10 posts\n   * const posts = await data.posts.take(10).list()\n   */\n  list () {\n    let result = []\n    const self = this\n    const {baseUrl, relationships, instance, mappedFields, _mapFields} = this\n    const fetch = this.fetch.bind(this)\n    const pageSize = this.query.page_size || 0\n\n    return new Promise((resolve, reject) => {\n      request(this.url())\n\n      function request (url) {\n        fetch(url)\n          .then(saveToResult)\n          .then(loadNextPage)\n          .then(resolveRelatedModels)\n          .then(replaceCustomTypesWithValue)\n          .then(mapResultFields)\n          .then(resolveIfFinished)\n          .catch(err => reject(err))\n      }\n\n      function saveToResult (response) {\n        result = result.concat(response.objects)\n\n        return response\n      }\n\n      function loadNextPage (response) {\n        const hasNextPageMeta = response.next\n        const hasNotEnoughResults = pageSize === 0 || pageSize > result.length\n\n        if (hasNextPageMeta && hasNotEnoughResults) {\n          request(`${baseUrl}${response.next}`)\n        } else {\n          return true\n        }\n      }\n\n      function resolveRelatedModels (shouldResolve) {\n        if (shouldResolve === false) {\n          return\n        }\n\n        return new Promise((resolve, reject) => {\n          if (relationships.length === 0) {\n            resolve(true)\n          }\n\n          const resolvers = relationships.map(reference => {\n            return new Promise((resolve, reject) => {\n              const empty = {\n                target: reference,\n                items: []\n              }\n\n              if (result[0] === undefined) {\n                resolve(empty)\n              }\n\n              if (result[0][reference] === undefined) {\n                throw new Error(`Invalid reference name \"${reference}\"`)\n              }\n\n              // Search for rows with references\n              const references = result\n                .filter(row => row[reference])\n                .map(row => {\n                  return row[reference]\n                })\n\n              // No references so resolve with empty array\n              if (references.length === 0) {\n                resolve(empty)\n              }\n\n              const {target} = references[0]\n              const load = new Data(self.instance)\n              let ids = references.map(item => item.value)\n\n              ids = Array.isArray(ids[0]) ? ids[0] : ids\n\n              if (target === 'user') {\n                load._url = `${self._getInstanceURL(instance.instanceName)}/users/`\n              }\n\n              load.instance = self.instance\n              load.instance.className = target\n\n              load\n                .where('id', 'in', ids)\n                .list()\n                .then(items => {\n                  resolve({target: reference, items})\n                })\n                .catch(reject)\n            })\n          })\n\n          Promise.all(resolvers)\n            .then(models => {\n              result = result.map(item => {\n                models.forEach(({target, items}) => {\n                  const related = self._getRelatedObjects(item[target], items)\n\n                  item[target] = related || item[target]\n                })\n\n                return item\n              })\n\n              resolve(true)\n            })\n            .catch(reject)\n        })\n      }\n\n      function replaceCustomTypesWithValue (shouldResolve) {\n        if (shouldResolve === false) {\n          return\n        }\n\n        result = result.map(item => {\n          Object.keys(item).forEach(key => {\n            const value = item[key]\n            const isObject = value instanceof Object && !Array.isArray(value)\n            const hasType = isObject && value.type !== undefined\n            const hasTarget = isObject && value.target !== undefined\n            const hasValue = isObject && value.value !== undefined\n\n            if (isObject && hasType && hasTarget && hasValue) {\n              item[key] = value.value\n            }\n          })\n\n          return item\n        })\n\n        return true\n      }\n\n      function mapResultFields (shouldResolve) {\n        if (shouldResolve === false) {\n          return\n        }\n\n        result = _mapFields(result, mappedFields)\n\n        return true\n      }\n\n      function resolveIfFinished (shouldResolve) {\n        if (shouldResolve) {\n          if (pageSize !== 0) {\n            result = result.slice(0, pageSize)\n          }\n\n          resolve(result)\n        }\n      }\n    })\n  }\n\n  _mapFields (items, fields) {\n    return fields.length === 0\n      ? items\n      : items.map(item =>\n          Object.keys(fields).reduce(\n            (all, key) => set(all, fields[key] || key, get(item, key)),\n            {}\n          )\n        )\n  }\n\n  _getRelatedObjects (reference, items) {\n    if (!reference) {\n      return null\n    }\n\n    if (Array.isArray(reference.value)) {\n      return items.filter(obj => reference.value.indexOf(obj.id) >= 0)\n    }\n\n    return items.find(obj => obj.id === reference.value)\n  }\n\n  /**\n   * Get first element matching query or return null.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('status', 'published').first()\n   */\n  first () {\n    return this.take(1).list().then(response => response[0] || null)\n  }\n\n  /**\n   * Get first element matching query or throw error\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('status', 'published').firstOrFail()\n   */\n  firstOrFail () {\n    return new Promise((resolve, reject) => {\n      this.first()\n        .then(\n          object => (object ? resolve(object) : reject(new NotFoundError()))\n        )\n        .catch(() => {\n          reject(new NotFoundError())\n        })\n    })\n  }\n\n  /**\n   * Get the first record matching the attributes or create it.\n   *\n   * @example {@lang javascript}\n   * const post = await data.posts\n   *   .updateOrCreate({name: 'value to match'}, {content: 'value to update'})\n   */\n  firstOrCreate (attributes, values = {}) {\n    const query = this._toWhereArray(attributes)\n\n    return this.where(query)\n      .firstOrFail()\n      .catch(() => this.create(merge(attributes, values)))\n  }\n\n  /**\n   * Create or update a record matching the attributes, and fill it with values.\n   *\n   * @example {@lang javascript}\n   * const post = await data.posts\n   *   .updateOrCreate({name: 'value to match'}, {content: 'value to update'})\n   */\n  updateOrCreate (attributes, values = {}) {\n    const query = this._toWhereArray(attributes)\n\n    return this.where(query)\n      .firstOrFail()\n      .then(res => this.update(res.id, values))\n      .catch(() => this.create(merge(attributes, values)))\n  }\n\n  _toWhereArray (attributes) {\n    return Object.keys(attributes).map(key => [key, 'eq', attributes[key]])\n  }\n\n  /**\n   * Get single object by id or objects list if ids passed as array.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.find(4)\n   * @example {@lang javascript}\n   * const posts = await data.posts.find([20, 99, 125])\n   */\n  find (ids) {\n    if (Array.isArray(ids)) {\n      return this.where('id', 'in', ids).list()\n    }\n\n    return this.where('id', 'eq', ids).first()\n  }\n\n  /**\n   * Same as #find method but throws error for no results.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.findOrFail(4)\n   * @example {@lang javascript}\n   * const posts = await data.posts.findOrFail([20, 99, 125])\n   * @example {@lang javascript}\n   * // Will throw error if at lest one of records was not found\n   * const posts = await data.posts.findOrFail([20, 99, 125], true)\n   */\n  findOrFail (ids) {\n    return new Promise((resolve, reject) => {\n      this.find(ids)\n        .then(response => {\n          const shouldThrow = Array.isArray(ids)\n            ? response.length !== ids.length\n            : response === null\n\n          return shouldThrow ? reject(new NotFoundError()) : resolve(response)\n        })\n        .catch(() => {\n          reject(new NotFoundError())\n        })\n    })\n  }\n\n  /**\n   * Number of objects to get.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.take(500).list()\n   */\n  take (count) {\n    return this.withQuery({page_size: count}) // eslint-disable-line camelcase\n  }\n\n  /**\n   * Set order of fetched objects.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.orderBy('created_at', 'DESC').list()\n   */\n  orderBy (column, direction = 'asc') {\n    direction = direction.toLowerCase()\n    direction = direction === 'desc' ? '-' : ''\n\n    return this.withQuery({\n      order_by: `${direction}${column}` // eslint-disable-line camelcase\n    })\n  }\n\n  /**\n   * Filter rows.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('status', 'in', ['draft', 'published']).list()\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('status', 'published').list()\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('created_at', 'gt' '2016-02-13').list()\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('user.id', 30).list()\n   * @example {@lang javascript}\n   * const posts = await data.posts.where('user.full_name', 'contains', 'John').list()\n   */\n  where (column, operator, value) {\n    if (Array.isArray(column)) {\n      column.map(([itemColumn, itemOperator, itemValue]) =>\n        this.where(itemColumn, itemOperator, itemValue)\n      )\n\n      return this\n    }\n    operator = this._normalizeWhereOperator(operator)\n\n    const whereOperator = value ? `_${operator}` : '_eq'\n    const whereValue = value === undefined ? operator : value\n\n    const currentQuery = JSON.parse(this.query.query || '{}')\n\n    const nextQuery = column.split('.').reverse().reduce(\n      (child, item) => ({\n        [item]: child === null\n          ? {\n            [whereOperator]: whereValue\n          }\n          : {\n            _is: child\n          }\n      }),\n      null\n    )\n\n    const query = merge({}, currentQuery, nextQuery)\n\n    return this.withQuery({query: JSON.stringify(query)})\n  }\n\n  _normalizeWhereOperator (operator) {\n    const operators = {\n      '<': 'lt',\n      '<=': 'lte',\n      '>': 'gt',\n      '>=': 'gte',\n      '=': 'eq',\n      '!=': 'neq',\n      '<>': 'neq'\n    }\n\n    return operators[operator] || operator\n  }\n\n  /**\n   * Whitelist returned keys.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.users.fields('name', 'email as username')->list()\n   */\n  fields (...fields) {\n    if (Array.isArray(fields[0])) {\n      fields = fields[0]\n    }\n\n    const fieldsToMap = fields.map(field => {\n      const [, from, , to] = field.match(/([\\w_\\-.]*)(\\sas\\s)?(.*)?/)\n\n      return {[from]: to}\n    })\n\n    this.withMappedFields(fieldsToMap)\n\n    return this\n  }\n\n  /**\n   * Expand references and relationships.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * data.posts.with('author').list()\n   * @example {@lang javascript}\n   * data.posts.with(['author', 'last_editor']).list()\n   */\n  with (...models) {\n    const relationships = Array.isArray(models[0]) ? models[0] : models\n\n    return this.withRelationships(relationships)\n  }\n\n  /**\n   * Get values of single column.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * data.posts.where('id', 10).pluck('title')\n   */\n  pluck (column) {\n    return this.list().then(items => items.map(item => item[column]))\n  }\n\n  /**\n   * Get value of single record column field.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * data.posts.where('id', 10).value('title')\n   */\n  value (column) {\n    return this.first().then(item => item[column])\n  }\n\n  /**\n   * Create new object.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * const posts = await data.posts.create({\n   *   title: 'Example post title',\n   *   content: 'Lorem ipsum dolor sit amet.'\n   * })\n   * data.posts.create([\n   *  { content: 'Lorem ipsum!' },\n   *  { content: 'More lorem ipsum!' }\n   * ])\n   */\n  create (body) {\n    let headers = null\n    let fetchObject = {\n      url: this.url(),\n      method: 'POST',\n      body: JSON.stringify(body)\n    }\n\n    if (body instanceof FormData) {\n      fetchObject.body = body\n      headers = body.getHeaders()\n    } else if (Array.isArray(body)) {\n      fetchObject = this._batchFetchObject(body)\n    }\n\n    return this.fetch(fetchObject.url, fetchObject, headers)\n  }\n\n  /**\n   * Update object in database.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * data.posts.update(55, { content: 'No more lorem ipsum!' })\n   * data.posts.update([\n   *  [55, { content: 'No more lorem ipsum!' }],\n   *  [56, { content: 'No more lorem ipsum!' }]\n   * ])\n   * data.posts.update({title: 'Update all posts title'})\n   * data.flights\n   *   .where('active', 1)\n   *   .where('destination', 'Warsaw')\n   *   .update({delayed: 1})\n   */\n  update (id, body) {\n    const isQueryUpdate =\n      typeof id === 'object' && id !== null && !Array.isArray(id)\n    let fetchObject = {\n      url: this.url(id),\n      method: 'PATCH',\n      body: JSON.stringify(body)\n    }\n\n    if (isQueryUpdate) {\n      return this.list().then(items => {\n        const ids = items.map(item => [item.id, id])\n\n        fetchObject = this._batchFetchObject(ids)\n\n        return this.fetch(fetchObject.url, fetchObject)\n      })\n    }\n\n    if (Array.isArray(id)) {\n      fetchObject = this._batchFetchObject(id)\n    }\n\n    return this.fetch(fetchObject.url, fetchObject)\n  }\n\n  /**\n   * Remove object from database.\n   *\n   * @returns {Promise}\n   *\n   * @example {@lang javascript}\n   * data.posts.delete(55)\n   * data.posts.delete([55, 56, 57])\n   * data.posts.delete()\n   * data.posts.where('draft', 1).delete()\n   */\n  delete (id) {\n    const isQueryDelete = id === undefined\n    let fetchObject = {\n      url: this.url(id),\n      method: 'DELETE'\n    }\n\n    if (isQueryDelete) {\n      return this.list().then(items => {\n        const ids = items.map(item => item.id)\n\n        fetchObject = this._batchFetchObject(ids)\n\n        return this.fetch(fetchObject.url, fetchObject)\n      })\n    }\n\n    if (Array.isArray(id)) {\n      fetchObject = this._batchFetchObject(id)\n    }\n\n    return this.fetch(fetchObject.url, fetchObject)\n  }\n}\n\nexport default Data\n"]}